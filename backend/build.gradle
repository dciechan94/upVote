buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'

version = '0.1'
group = 'pl.krakow.up.upvote'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    [
            compile("org.springframework.boot:spring-boot-starter-web:1.5.9.RELEASE"),
            compile("org.springframework.data:spring-data-mongodb"),
            compile("org.springframework.boot:spring-boot-starter-security")

    ].each { dep ->
        compile(dep) {
            exclude module: "spring-boot-starter-logging"
            exclude module: "logback-classic"
        }
    }

    // LOGGING
    // Exclude "spring-boot-starter-logging" and "logback-classic". Include "spring-boot-starter-log4j2",
    // "log4j-api", "log4j-core". Remember to skip versions - springBoot declares log4j2 compatible versions
    // and these are included
    compile("org.springframework.boot:spring-boot-starter-log4j2")
    compile("org.apache.logging.log4j:log4j-api")
    compile("org.apache.logging.log4j:log4j-core")

    //compile group: 'org.springframework.data', name: 'spring-data-jpa'
    compile("org.hibernate:hibernate-entitymanager")
    runtime("postgresql:postgresql:9.1-901-1.jdbc4")

    compile 'javax.xml.bind:jaxb-api:2.3.0'
    compile 'com.opencsv:opencsv:4.0'

    // TESTS
    testCompile("org.springframework:spring-test")
    testCompile("junit:junit:4.12")
    testCompile("org.mockito:mockito-all:1.8.4")
}


test {
    filter {
    }
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

springBoot {
    mainClass = group + ".Runner"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10' //we want gradle 2.10 to run this project
}